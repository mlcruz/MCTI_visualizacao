<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_trie_8py">
    <title>Trie.py File Reference</title>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_trie_1_1_nodo">Trie::Nodo</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_trie_1_1_trie">Trie::Trie</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespace_trie">Trie</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file C:/Users/PC/source/repos/Trabalho_final_cpd/SimpleGraphNoSQL/Trie.py</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">#Default&#32;dict&#32;para&#32;implementar&#32;tries</emphasis>
2 <emphasis class="keyword">from</emphasis>&#32;collections&#32;<emphasis class="keyword">import</emphasis>&#32;defaultdict
3 <emphasis class="keyword">from</emphasis>&#32;Tabela&#32;<emphasis class="keyword">import</emphasis>&#32;normalize
4 
5 <emphasis class="keyword">import</emphasis>&#32;regex
6 
<link linkend="class_trie_1_1_nodo">7 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_trie_1_1_nodo">Nodo</link>(object):
8 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Representa&#32;um&#32;nodo&#32;de&#32;uma&#32;trie&apos;&apos;&apos;</emphasis>
9 
10 &#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis><link linkend="class_trie_1_1_nodo_1a14edf9313e0cb711a55c47d8250b566b">__init__</link>(self,char_data,&#32;data):
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Inicializa&#32;nodos&#32;com&#32;dados.&#32;char_data&#32;é&#32;o&#32;caractere,&#32;e&#32;data&#32;são&#32;os&#32;dados&#32;ligados&#32;aquele&#32;nodo.&#32;Representar&#32;nenhum&#32;dado&#32;como&#32;0&#32;&apos;&apos;&apos;</emphasis>
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Filhos&#32;do&#32;nodo</emphasis>
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_nodo_1a4d02f803001c14b673ec515096536cf5">child</link>&#32;=&#32;defaultdict(dict)
14 
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Pai&#32;do&#32;nodo.&#32;0&#32;indica&#32;raiz,&#32;-1&#32;não&#32;atribuido</emphasis>
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_nodo_1a554b24962e680d0641df132499788c01">parent</link>&#32;=&#32;-1
17 
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#0&#32;em&#32;chard&#32;indica&#32;raiz</emphasis>
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_nodo_1ac3ea66bba593e72a8b0db4b7b70c48a9">chard</link>&#32;=&#32;char_data
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_nodo_1ad96070f8122b253194611b8f8b0d4e86">data</link>&#32;=&#32;data
21 
<link linkend="class_trie_1_1_trie">22 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_trie_1_1_trie">Trie</link>(object):
23 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;&quot;&quot;Implementa&#32;uma&#32;Trie&#32;para&#32;pesquisa&#32;no&#32;nome&#32;de&#32;tabelas&#32;de&#32;maneira&#32;eficiente&quot;&quot;&quot;</emphasis>
24 &#32;&#32;&#32;&#32;
25 &#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis><link linkend="class_trie_1_1_trie_1a9b9de44cd1cfcf4001d34b1c435c0dd0">__init__</link>(self):
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Inicializa&#32;raiz&#32;da&#32;trie&#32;como&#32;um&#32;defaultdict&#32;com&#32;uma&#32;factory&#32;de&#32;dicionarios&apos;&apos;&apos;</emphasis>
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#A&#32;ideia&#32;aqui&#32;é&#32;representar&#32;uma&#32;Trie&#32;como&#32;grupos&#32;de&#32;dicionarios&#32;aninhados.</emphasis>
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a323873a709ecdd62ebe123fa9c3abff4">root</link>&#32;=&#32;<link linkend="class_trie_1_1_nodo">Nodo</link>(0,0)
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Strings&#32;resultados&#32;da&#32;ultima&#32;busca&#32;da&#32;função&#32;yield_strings.&#32;Formato&#32;de&#32;dicionario&#32;para&#32;acesso&#32;mais&#32;eficiente</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a83967a78c562d8aca0a9f979a14d6c98">strings_dict</link>&#32;=&#32;defaultdict()
32 
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Formato&#32;de&#32;lista&#32;para&#32;acesso&#32;sequencial&#32;caso&#32;necessario</emphasis>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1aa4cff19308fc0f8647bd6b3fd06fc1af">strings_list</link>&#32;=&#32;[]
35 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Apontador&#32;futuro&#32;para&#32;trie&#32;reversa</emphasis>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1acfbb76a3f77a007fbef4f7e270842f64">reverse</link>&#32;=&#32;-1
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Inicializa&#32;chard&#32;e&#32;parent&#32;do&#32;nodo&#32;raiz&#32;como&#32;0</emphasis>
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a323873a709ecdd62ebe123fa9c3abff4">root</link>.chard&#32;=&#32;0
41 
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a323873a709ecdd62ebe123fa9c3abff4">root</link>.parent&#32;=&#32;0
43 
44 &#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis>yield_strings(self,trie):
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a83967a78c562d8aca0a9f979a14d6c98">strings_dict</link>.clear()
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1aa4cff19308fc0f8647bd6b3fd06fc1af">strings_list</link>.clear()
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a4330187a6c01542433e3debf288f7567">__yield_strings_aux</link>(trie)
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;self.<link linkend="class_trie_1_1_trie_1a83967a78c562d8aca0a9f979a14d6c98">strings_dict</link>
49 
50 
51 &#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis>__yield_strings_aux(self,trie,string&#32;=&#32;&quot;&quot;&#32;):
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;&quot;&quot;Retorna&#32;todas&#32;as&#32;palavras&#32;na&#32;trie&#32;especificada.&#32;Usa&#32;como&#32;criterio&#32;de&#32;ser&#32;palavra&#32;a&#32;existencia&#32;de&#32;um&#32;&quot;dados&quot;&#32;não&#32;nulo&quot;&quot;&quot;</emphasis>
53 &#32;&#32;&#32;&#32;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(trie.data&#32;!=&#32;0):
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Ao&#32;encontrar&#32;uma&#32;folha,&#32;cria&#32;uma&#32;chave&#32;para&#32;um&#32;dicionario&#32;com&#32;a&#32;string&#32;da&#32;folha&#32;como&#32;chave&#32;e&#32;os&#32;dados&#32;como&#32;valor</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a83967a78c562d8aca0a9f979a14d6c98">strings_dict</link>[string]&#32;=&#32;trie.data
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Cria&#32;uma&#32;lista&#32;de&#32;strings&#32;encontradas</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1aa4cff19308fc0f8647bd6b3fd06fc1af">strings_list</link>.append(string)
60 
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elif(<emphasis class="keywordflow">not</emphasis>&#32;bool(trie.child)):
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis class="stringliteral">&quot;fim&#32;nodo&#32;-&#32;{0}&quot;</emphasis>.format(string))
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_list&#32;=&#32;trie.child.keys()
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key&#32;<emphasis class="keywordflow">in</emphasis>&#32;key_list:
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="class_trie_1_1_trie_1a4330187a6c01542433e3debf288f7567">__yield_strings_aux</link>(trie.child[key],string+key)
68 
69 <emphasis class="keyword">def&#32;</emphasis>insert(string,&#32;data,&#32;n_trie):
70 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Insere&#32;a&#32;string&#32;como&#32;chave&#32;ligada&#32;a&#32;um&#32;dado&#32;no&#32;ultimo&#32;nodo&#32;da&#32;trie&#32;especificada&apos;&apos;&apos;</emphasis>
71 &#32;&#32;&#32;&#32;char_list&#32;=&#32;list(normalize(string.lower()))
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
73 &#32;&#32;&#32;&#32;<emphasis class="comment">#Define&#32;proximo&#32;pai&#32;como&#32;nodo&#32;atual</emphasis>
74 &#32;&#32;&#32;&#32;current_parent&#32;=&#32;n_trie
75 
76 &#32;&#32;&#32;&#32;<emphasis class="comment">#Recursivamente&#32;insere&#32;na&#32;lista</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;a&#32;lista&#32;não&#32;esta&#32;no&#32;ultimo&#32;elemento,&#32;inseere&#32;recursivamente&#32;começando&#32;pelo&#32;primeiro&#32;caractere</emphasis>
78 &#32;&#32;&#32;&#32;if(len(char_list)&#32;!=&#32;1):
79 
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#testa&#32;se&#32;o&#32;nodo&#32;referente&#32;ao&#32;primeiro&#32;caractere&#32;existe.&#32;Se&#32;nao&#32;existir,&#32;retorna&#32;um&#32;dicionario&#32;vazio(ver&#32;defaultdict)</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_child&#32;=&#32;n_trie.child[char_list[0]]
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
84 
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#testa&#32;se&#32;o&#32;filho&#32;tem&#32;dados&#32;antes&#32;de&#32;gravar&#32;0.&#32;Se&#32;não&#32;é&#32;vazio,&#32;existe&#32;um&#32;nodo&#32;no&#32;filho</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(current_child):
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Testa&#32;se&#32;os&#32;dados&#32;são&#32;vazios&#32;no&#32;nodo&#32;filho</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;os&#32;dados&#32;não&#32;são&#32;vazios,&#32;vai&#32;pro&#32;proximo&#32;nodo&#32;sem&#32;inserir</emphasis>
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Remove&#32;primeiro&#32;caractere&#32;da&#32;lista&#32;de&#32;caracteres</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_char&#32;=&#32;char_list.pop(0)
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Chamada&#32;recursiva&#32;na&#32;string&#32;sem&#32;o&#32;primeiro&#32;char</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis class="stringliteral">&apos;&apos;</emphasis>.join(char_list),data,n_trie.child[first_char])
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;é&#32;vazio,&#32;cria&#32;nodo&#32;no&#32;local&#32;e&#32;insere&#32;no&#32;proximo&#32;char</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_trie.child[char_list[0]]&#32;=&#32;<link linkend="class_trie_1_1_nodo">Nodo</link>(char_list[0],0)
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Aponta&#32;pai&#32;do&#32;nodo</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_trie.child[char_list[0]].parent&#32;=&#32;current_parent
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Remove&#32;primeiro&#32;caractere&#32;da&#32;lista&#32;de&#32;caracteres</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_char&#32;=&#32;char_list.pop(0)
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Chamada&#32;recursiva&#32;na&#32;string&#32;sem&#32;o&#32;primeiro&#32;char</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis class="stringliteral">&apos;&apos;</emphasis>.join(char_list),data,n_trie.child[first_char])
108 
109 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;está&#32;na&#32;ultima&#32;letra,&#32;fim</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_char&#32;=&#32;char_list.pop(0)
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_trie.child[first_char]&#32;=&#32;<link linkend="class_trie_1_1_nodo">Nodo</link>(first_char,data)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_trie.child[first_char].parent&#32;=&#32;current_parent
114 
115 <emphasis class="keyword">def&#32;</emphasis>generate_reverse_trie(trie):
116 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Recebe&#32;uma&#32;trie&#32;e&#32;retorna&#32;a&#32;trie&#32;reversa(para&#32;busca&#32;por&#32;sufixo)</emphasis>
117 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;&apos;&apos;&apos;</emphasis>
118 &#32;&#32;&#32;&#32;
119 &#32;&#32;&#32;&#32;<emphasis class="comment">#Cria&#32;trie&#32;de&#32;retorno</emphasis>
120 &#32;&#32;&#32;&#32;t&#32;=&#32;<link linkend="class_trie_1_1_trie">Trie</link>()
121 
122 &#32;&#32;&#32;&#32;<emphasis class="comment">#Insere&#32;na&#32;trie&#32;os&#32;dados&#32;da&#32;trie&#32;original,&#32;mas&#32;com&#32;o&#32;nome&#32;reverso</emphasis>
123 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key&#32;<emphasis class="keywordflow">in</emphasis>&#32;trie.strings_dict:
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(key[::-1],trie.strings_dict[key],t.root)
125 
126 &#32;&#32;&#32;&#32;t.yield_strings(t.root)
127 
128 &#32;&#32;&#32;&#32;<emphasis class="comment">#aponta&#32;tries&#32;reversas&#32;uma&#32;para&#32;a&#32;outra</emphasis>
129 &#32;&#32;&#32;&#32;t.reverse&#32;=&#32;trie
130 &#32;&#32;&#32;&#32;trie.reverse&#32;=&#32;t
131 
132 &#32;&#32;&#32;&#32;<emphasis class="comment">#Retorna&#32;trie</emphasis>
133 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;t&#32;&#32;&#32;&#32;&#32;
134 &#32;&#32;&#32;&#32;
135 <emphasis class="keyword">def&#32;</emphasis>walk_to(n_trie,&#32;string):
136 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Caminha&#32;a&#32;string&#32;no&#32;nodo&#32;da&#32;trie&#32;até&#32;o&#32;nodo&#32;onde&#32;termina&#32;a&#32;string&#32;recebida.&#32;Retorna&#32;o&#32;nodo&#32;destino&#32;ou&#32;-1&#32;em&#32;caso&#32;de&#32;falha&apos;&apos;&apos;</emphasis>
137 &#32;&#32;&#32;&#32;
138 &#32;&#32;&#32;&#32;<emphasis class="comment">#Lista&#32;de&#32;caracteres&#32;a&#32;inserir</emphasis>
139 &#32;&#32;&#32;&#32;char_list&#32;=&#32;list(normalize(string.lower()))
140 &#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;a&#32;lista&#32;não&#32;está&#32;vazia</emphasis>
141 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(char_list):
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_char&#32;=&#32;char_list.pop(0)
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;existem&#32;nodos&#32;filhos</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n_trie.child[first_char]):
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;walk_to(n_trie.child[first_char],<emphasis class="stringliteral">&quot;&quot;</emphasis>.join(char_list))
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1
148 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;de&#32;caracteres&#32;está&#32;vazia,&#32;chegou&#32;no&#32;fim</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;n_trie
151 
152 <emphasis class="keyword">def&#32;</emphasis>moonwalk_to(nodo,&#32;string):
153 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Caminha&#32;a&#32;string&#32;do&#32;fim&#32;pro&#32;começo&#32;saindo&#32;do&#32;nodo&#32;e&#32;indo&#32;no&#32;sentido&#32;da&#32;raiz.&#32;Retorna&#32;o&#32;nodo&#32;destino&#32;ou&#32;-1&#32;em&#32;caso&#32;de&#32;falha&apos;&apos;&apos;</emphasis>
154 &#32;&#32;&#32;&#32;
155 &#32;&#32;&#32;&#32;<emphasis class="comment">#Lista&#32;de&#32;caracteres&#32;a&#32;inserir</emphasis>
156 &#32;&#32;&#32;&#32;char_list&#32;=&#32;list(normalize(string.lower()))
157 
158 &#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;a&#32;lista&#32;não&#32;está&#32;vazia</emphasis>
159 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(char_list):
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_char&#32;=&#32;char_list.pop()
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;existem&#32;nodos&#32;pai&#32;que&#32;satisfazem&#32;o&#32;ultimo&#32;caractere&#32;removido(após&#32;normalização)</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(nodo.parent.chard&#32;==&#32;normalize(last_char)):
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;moonwalk_to(nodo.parent,<emphasis class="stringliteral">&quot;&quot;</emphasis>.join(char_list))
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;raiz</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">elif</emphasis>&#32;(nodo.parent.chard&#32;==&#32;0):
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1
170 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;de&#32;caracteres&#32;está&#32;vazia,&#32;chegou&#32;no&#32;fim</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;nodo
173 
174 <emphasis class="keyword">def&#32;</emphasis>get_label(nodo,&#32;string&#32;=&#32;&quot;&quot;):
175 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Caminha&#32;um&#32;nodo&#32;no&#32;sentido&#32;nodo&#32;raiz&#32;até&#32;a&#32;raiz&#32;e&#32;devolve&#32;os&#32;caracteres&#32;encontrados&#32;no&#32;camniho&apos;&apos;&apos;</emphasis>
176 
177 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;nodo.chard&#32;==&#32;0:
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;string
179 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string&#32;=&#32;&#32;nodo.chard&#32;+&#32;string&#32;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;get_label(nodo.parent,&#32;string)
182 
183 <emphasis class="keyword">def&#32;</emphasis>prefix_search(trie,&#32;string):
184 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Retorna&#32;o&#32;dicionario&#32;{label,data}&#32;de&#32;todos&#32;os&#32;objetos&#32;encontrados,&#32;usando&#32;a&#32;string&#32;recebida&#32;como&#32;prefixo&#32;para&#32;buscar&#32;na&#32;trie&#32;recebida</emphasis>
185 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;&apos;&apos;&apos;</emphasis>
186 &#32;&#32;&#32;&#32;
187 &#32;&#32;&#32;&#32;<emphasis class="comment">#Caminha&#32;até&#32;string</emphasis>
188 &#32;&#32;&#32;&#32;w&#32;=&#32;walk_to(trie.root,string)
189 &#32;&#32;&#32;&#32;
190 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;w&#32;!=&#32;-1:
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Recebe&#32;dados&#32;se&#32;existe&#32;algum</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;get_all_data(w)
193 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;[]
195 
196 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;data
197 
198 <emphasis class="keyword">def&#32;</emphasis>suffix_search(trie,&#32;string):
199 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Retorna&#32;o&#32;dicionario&#32;{label,data}&#32;de&#32;todos&#32;os&#32;objetos&#32;encontrados,&#32;usando&#32;a&#32;string&#32;recebida&#32;como&#32;sufixo&#32;para&#32;buscar&#32;na&#32;trie&#32;recebida&apos;&apos;&apos;</emphasis>
200 
201 &#32;&#32;&#32;&#32;<emphasis class="comment">#String&#32;revertida</emphasis>
202 &#32;&#32;&#32;&#32;r_string&#32;=&#32;string[::-1]
203 
204 &#32;&#32;&#32;&#32;<emphasis class="comment">#Caminha&#32;até&#32;a&#32;string&#32;na&#32;arvore&#32;reversa</emphasis>
205 &#32;&#32;&#32;&#32;w&#32;=&#32;walk_to(trie.reverse.root,r_string)
206 
207 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;w&#32;!=&#32;-1:
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Retorna&#32;dados</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_data&#32;=&#32;get_all_data(w)
210 
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;defaultdict()
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Reverte&#32;a&#32;chave&#32;dos&#32;dados&#32;retornados</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key,&#32;value&#32;<emphasis class="keywordflow">in</emphasis>&#32;r_data.items():
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data[<emphasis class="stringliteral">&apos;&apos;</emphasis>.join(list(key)[::-1])]&#32;=&#32;value
216 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;[]
218 
219 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;data
220 
221 <emphasis class="keyword">def&#32;</emphasis>regex_search(trie,&#32;re_string):
222 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Pesquisa&#32;expressão&#32;regular&#32;na&#32;trie&#32;recebida.&#32;Retorna&#32;dicionario&#32;de&#32;todos&#32;os&#32;nodos&#32;onde&#32;a&#32;chave&#32;contem&#32;o&#32;valor&#32;da&#32;expressão&apos;&apos;&apos;</emphasis>
223 &#32;&#32;&#32;&#32;data&#32;=&#32;get_all_data(trie.root)
224 &#32;&#32;&#32;&#32;matched&#32;=&#32;defaultdict()
225 
226 &#32;&#32;&#32;&#32;c_pattern&#32;=&#32;regex.compile(re_string)
227 
228 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key,&#32;value&#32;<emphasis class="keywordflow">in</emphasis>&#32;data.items():
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(bool(c_pattern.findall(key))):
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matched[key]&#32;=&#32;value
231 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;matched
232 
233 <emphasis class="keyword">def&#32;</emphasis>regex_dict_search(dict,&#32;re_string):
234 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Pesquisa&#32;expressão&#32;regular&#32;no&#32;default&#32;dict&#32;em&#32;formato&#32;de&#32;trie&#32;recebido.&#32;Retorna&#32;dicionario&#32;de&#32;todos&#32;os&#32;nodos&#32;onde&#32;a&#32;chave&#32;contem&#32;o&#32;valor&#32;da&#32;expressão&apos;&apos;&apos;</emphasis>
235 &#32;&#32;&#32;&#32;data&#32;=&#32;dict
236 &#32;&#32;&#32;&#32;matched&#32;=&#32;defaultdict()
237 
238 &#32;&#32;&#32;&#32;c_pattern&#32;=&#32;regex.compile(re_string)
239 
240 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key,&#32;value&#32;<emphasis class="keywordflow">in</emphasis>&#32;data.items():
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(bool(c_pattern.findall(key))):
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matched[key]&#32;=&#32;value
243 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;matched
244 
245 <emphasis class="keyword">def&#32;</emphasis>get_all_data(n_trie&#32;,r_type&#32;=&#32;&apos;dict&apos;):
246 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&apos;&apos;&apos;Recebe&#32;um&#32;nodo&#32;de&#32;trie&#32;e&#32;Retorna&#32;dicionario&#32;no&#32;formato&#32;{label,table}&#32;contendo&#32;todos&#32;os&#32;dados&#32;não&#32;nulos&#32;da&#32;trie&#32;especificada.&#32;Se&#32;r_type&#32;=&#32;&apos;list&apos;,&#32;retorna&#32;uma&#32;lista&#32;em&#32;vez&#32;de&#32;um&#32;dict&apos;&apos;&apos;</emphasis>
247 &#32;&#32;&#32;&#32;
248 &#32;&#32;&#32;&#32;<emphasis class="comment">#Dicionario&#32;para&#32;receber&#32;resultados&#32;da&#32;função&#32;auxliar</emphasis>
249 &#32;&#32;&#32;&#32;def_dict&#32;=&#32;defaultdict(dict)
250 
251 &#32;&#32;&#32;&#32;<emphasis class="comment">#list&#32;para&#32;dados</emphasis>
252 &#32;&#32;&#32;&#32;def_list&#32;=&#32;[]
253 
254 &#32;&#32;&#32;&#32;<emphasis class="comment">#Pega&#32;label&#32;do&#32;nodo&#32;encontrado</emphasis>
255 &#32;&#32;&#32;&#32;w_label&#32;=&#32;get_label(n_trie)
256 &#32;&#32;&#32;&#32;
257 &#32;&#32;&#32;&#32;__get_all_data_aux(n_trie,def_dict,def_list,w_label)
258 
259 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;r_type&#32;==&#32;<emphasis class="stringliteral">&apos;dict&apos;</emphasis>:
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;def_dict
261 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;def_list
263 
264 <emphasis class="keyword">def&#32;</emphasis>__get_all_data_aux(n_trie,def_dict,def_list,label,string&#32;=&#32;&quot;&quot;):
265 
266 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;&quot;&quot;Auxiliar&#32;para&#32;get_all&#32;data.&#32;Insere&#32;na&#32;lista&#32;recebida&#32;todas&#32;as&#32;palavras&#32;no&#32;nodo&#32;da&#32;trie&#32;especificada.&#32;Usa&#32;como&#32;criterio&#32;de&#32;ser&#32;palavra&#32;a&#32;existencia&#32;de&#32;&quot;dados&quot;&#32;não&#32;nulos&quot;&quot;&quot;</emphasis>&#32;&#32;&#32;
267 &#32;&#32;&#32;&#32;if(n_trie.data&#32;!=&#32;0):
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Ao&#32;encontrar&#32;uma&#32;folha,&#32;cria&#32;uma&#32;chave&#32;para&#32;um&#32;dicionario&#32;com&#32;a&#32;string&#32;da&#32;folha&#32;como&#32;chave&#32;e&#32;os&#32;dados&#32;como&#32;valor</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def_dict[label+string]&#32;=&#32;n_trie.data
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Cria&#32;uma&#32;lista&#32;de&#32;strings&#32;encontradas</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def_list.append(label+string)
273 
274 &#32;&#32;&#32;&#32;elif(<emphasis class="keywordflow">not</emphasis>&#32;bool(n_trie.child)):
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis class="stringliteral">&quot;fim&#32;nodo&#32;-&#32;{0}&quot;</emphasis>.format(string))
276 
277 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_list&#32;=&#32;n_trie.child.keys()
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;key&#32;<emphasis class="keywordflow">in</emphasis>&#32;key_list:
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Se&#32;existe&#32;o&#32;filho,&#32;desce</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;bool(n_trie.child[key]):
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__get_all_data_aux(n_trie.child[key],def_dict,def_list,label,string+key)
283 
284 
285 
286 
287 
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
293 
294 
295 
296 
297 
    </computeroutput></literallayout>
</section>
